name: CI/CD

on:
  push:

jobs:
  test:
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.52.0-noble
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 24

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm test

  cancel_previous_builds:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}

  build_and_push:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [test, cancel_previous_builds]
    outputs:
      image_digest: ${{ steps.push.outputs.image_digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Push Docker Image
        id: push
        run: |
          docker build --no-cache -t ghcr.io/${{ github.repository_owner }}/itadaki-web:latest .
          docker push ghcr.io/${{ github.repository_owner }}/itadaki-web:latest
          IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ghcr.io/${{ github.repository_owner }}/itadaki-web:latest)
          echo "image_digest=${IMAGE_DIGEST#*@}" >> $GITHUB_OUTPUT

  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: [self-hosted]
    needs: build_and_push
    steps:
      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Create .env file
        run: |
          cat <<EOF > .env
          GITHUB_ID=${{ secrets.NEXTAUTH_GITHUB_ID }}
          GITHUB_SECRET=${{ secrets.NEXTAUTH_GITHUB_SECRET }}
          NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
          DB_NAME=${{ vars.DB_NAME }}
          DB_USER=${{ vars.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          POSTGRES_DB=${{ vars.DB_NAME }}
          POSTGRES_USER=${{ vars.DB_USER }}
          POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}
          SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
          NEXT_PUBLIC_SENTRY_DSN=${{ vars.NEXT_PUBLIC_SENTRY_DSN }}
          SERVER_SENTRY_DSN=${{ vars.SERVER_SENTRY_DSN }}
          NEXTAUTH_URL=https://itadaki.app
          IMAGE_DIGEST=${{ needs.build_and_push.outputs.image_digest }}
          EOF

      - name: Set REPO_OWNER
        run: echo "REPO_OWNER=${{ github.repository_owner }}" >> $GITHUB_ENV

      - name: Pull latest Docker image
        run: docker compose -f docker-compose.prod.yml pull itadaki_web

      - name: Start containers using pulled image
        run: docker compose --env-file .env -f docker-compose.prod.yml up -d --remove-orphans --force-recreate

      - name: Clean up unused Docker resources
        run: docker system prune -af
